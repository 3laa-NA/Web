/**
 * Script complet pour r√©initialiser la base de donn√©es MongoDB avec des donn√©es r√©alistes :
 * - suppression des anciennes collections
 * - cr√©ation des collections et des index
 * - cr√©ation des comptes admin et d√©veloppeur
 * - peuplement d'utilisateurs vari√©s dans tous les √©tats (active, inactive, pending)
 * - cr√©ation de forums avec messages et r√©ponses r√©alistes
 * - g√©n√©ration de conversations priv√©es riches et contextuelles
 * - donn√©es adapt√©es au contexte d'une association
 *
 * Usage: node scripts/reset-database.js
 */
require('dotenv').config();
const { MongoClient, ObjectId } = require('mongodb');
const { MONGODB_URI, DB_NAME, COLLECTIONS, INDEXES } = require('../config/database');
const { hashPassword } = require('../utils/securityUtils');

(async () => {
  const client = new MongoClient(MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true });
  try {
    await client.connect();
    const db = client.db(DB_NAME);
    console.log('R√©initialisation de la base ' + DB_NAME);

    // 1) Suppression compl√®te de la base
    await db.dropDatabase();
    console.log('Base de donn√©es supprim√©e');

    // 2) Cr√©ation des collections et des index
    for (const [name, colName] of Object.entries(COLLECTIONS)) {
      await db.createCollection(colName);
      console.log(`+ Collection ${colName} cr√©√©e`);
      const indexes = INDEXES[colName] || [];
      for (const idx of indexes) {
        await db.collection(colName).createIndex(idx.key, idx.options);
        console.log(`  ‚Ä¢ Index cr√©√© sur ${colName} : ${JSON.stringify(idx.key)}`);
      }
    }

    // 3) Cr√©ation du compte admin
    const usersCol = db.collection(COLLECTIONS.USERS);
    const adminPass = process.env.ADMIN_DEFAULT_PASSWORD || 'admin123';
    const adminHash = await hashPassword(adminPass);
    const adminId = new ObjectId();
    await usersCol.insertOne({
      _id: adminId,
      login: 'admin',
      passwordHash: adminHash,
      firstName: 'Admin',
      lastName: 'System',
      role: 'admin',
      status: 'active',
      email: 'admin@system.com',
      bio: 'Administrateur syst√®me',
      createdAt: new Date(),
      lastLogin: null
    });
    console.log('Compte admin cr√©√© : admin / ' + adminPass);

    // 4) Cr√©ation du compte d√©veloppeur
    const devHash = await hashPassword('lmao');
    const devId = new ObjectId();
    await usersCol.insertOne({
      _id: devId,
      login: 'lmao',
      passwordHash: devHash,
      firstName: 'Dev',
      lastName: 'Account',
      role: 'admin',
      status: 'active',
      email: 'dev@example.com',
      bio: 'Compte d√©veloppeur',
      createdAt: new Date(),
      lastLogin: null
    });
    console.log('Compte dev cr√©√© : lmao / lmao');

    // 5) Cr√©ation des forums par d√©faut
    const forumsCol = db.collection(COLLECTIONS.FORUMS);
    const publicForumId = new ObjectId();
    const privateForumId = new ObjectId();
    
    await forumsCol.insertMany([
      {
        _id: publicForumId,
        name: 'Forum Public',
        description: 'Forum accessible √† tous les utilisateurs',
        isPublic: true,
        createdAt: new Date(),
        createdBy: adminId
      },
      {
        _id: privateForumId,
        name: 'Forum Admin',
        description: 'Forum r√©serv√© aux administrateurs',
        isPublic: false,
        createdAt: new Date(),
        createdBy: adminId
      }
    ]);
    console.log('Forums par d√©faut cr√©√©s');    // 6) Peuplement d'utilisateurs vari√©s et r√©alistes pour une association
    const associationMembers = [
      // Membres actifs - Bureau de l'association
      { login: 'marie.president', firstName: 'Marie', lastName: 'Dubois', email: 'marie.dubois@asso.org', bio: 'Pr√©sidente de l\'association depuis 2023. Passionn√©e par les projets communautaires.', role: 'user', status: 'active' },
      { login: 'pierre.tresorier', firstName: 'Pierre', lastName: 'Martin', email: 'pierre.martin@asso.org', bio: 'Tr√©sorier et responsable des finances. Expert-comptable de formation.', role: 'user', status: 'active' },
      { login: 'sophie.secretaire', firstName: 'Sophie', lastName: 'Bernard', email: 'sophie.bernard@asso.org', bio: 'Secr√©taire g√©n√©rale. Coordonne les √©v√©nements et la communication.', role: 'user', status: 'active' },
      
      // Membres actifs - B√©n√©voles r√©guliers
      { login: 'julien.event', firstName: 'Julien', lastName: 'Rousseau', email: 'julien.rousseau@email.com', bio: 'Responsable √©v√©nementiel. Organise nos sorties et activit√©s de groupe.', role: 'user', status: 'active' },
      { login: 'claire.comm', firstName: 'Claire', lastName: 'Petit', email: 'claire.petit@email.com', bio: 'Charg√©e de communication. G√®re nos r√©seaux sociaux et newsletters.', role: 'user', status: 'active' },
      { login: 'antoine.tech', firstName: 'Antoine', lastName: 'Garcia', email: 'antoine.garcia@email.com', bio: 'Responsable technique. D√©veloppeur web et soutien informatique.', role: 'user', status: 'active' },
      { login: 'emma.benevole', firstName: 'Emma', lastName: 'Leroy', email: 'emma.leroy@email.com', bio: 'B√©n√©vole active depuis 1 an. Participe √† tous les projets !', role: 'user', status: 'active' },
      { login: 'lucas.sport', firstName: 'Lucas', lastName: 'Moreau', email: 'lucas.moreau@email.com', bio: 'Animateur sportif. Organise les tournois et activit√©s physiques.', role: 'user', status: 'active' },
      { login: 'camille.culture', firstName: 'Camille', lastName: 'Simon', email: 'camille.simon@email.com', bio: 'Responsable culturelle. Passionn√©e d\'art et d\'histoire locale.', role: 'user', status: 'active' },
      { login: 'thomas.jeunes', firstName: 'Thomas', lastName: 'Laurent', email: 'thomas.laurent@email.com', bio: 'Animateur jeunesse. Coordonne les activit√©s pour les 16-25 ans.', role: 'user', status: 'active' },
      
      // Nouveaux membres en attente d'approbation
      { login: 'lisa.nouvelle', firstName: 'Lisa', lastName: 'Roux', email: 'lisa.roux@email.com', bio: 'Nouvelle arrivante en ville. Souhaite s\'impliquer dans la vie associative.', role: 'user', status: 'pending' },
      { login: 'hugo.etudiant', firstName: 'Hugo', lastName: 'Durand', email: 'hugo.durand@student.edu', bio: '√âtudiant en sociologie. Recherche une association pour mon engagement citoyen.', role: 'user', status: 'pending' },
      { login: 'nadia.retraite', firstName: 'Nadia', lastName: 'Blanc', email: 'nadia.blanc@email.com', bio: 'R√©cemment retrait√©e. Souhaite donner de mon temps pour aider la communaut√©.', role: 'user', status: 'pending' },
      { login: 'kevin.motivation', firstName: 'Kevin', lastName: 'Fabre', email: 'kevin.fabre@email.com', bio: 'Tr√®s motiv√© pour rejoindre l\'√©quipe ! Exp√©rience en organisation d\'√©v√©nements.', role: 'user', status: 'pending' },
      
      // Anciens membres inactifs
      { login: 'michel.ancien', firstName: 'Michel', lastName: 'Girard', email: 'michel.girard@email.com', bio: 'Ancien pr√©sident (2019-2022). Moins disponible actuellement.', role: 'user', status: 'inactive' },
      { login: 'sylvie.pause', firstName: 'Sylvie', lastName: 'Mercier', email: 'sylvie.mercier@email.com', bio: 'En pause temporaire pour raisons personnelles.', role: 'user', status: 'inactive' },
      { login: 'paul.demenage', firstName: 'Paul', lastName: 'Legrand', email: 'paul.legrand@email.com', bio: 'A d√©m√©nag√© dans une autre r√©gion. Compte revenir un jour !', role: 'user', status: 'inactive' },
    ];
      const userIds = {};
    for (const member of associationMembers) {
      const pwHash = await hashPassword(member.login);
      const userId = new ObjectId();
      userIds[member.login] = userId; // Stocker en ObjectId pour les messages
      
      await usersCol.insertOne({
        _id: userId,
        login: member.login,
        passwordHash: pwHash,
        firstName: member.firstName,
        lastName: member.lastName,
        email: member.email,
        bio: member.bio,
        role: member.role,
        status: member.status,
        createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000), // Dates d'inscription vari√©es sur l'ann√©e
        lastLogin: member.status === 'active' ? new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000) : null
      });
      console.log(`‚Ä¢ ${member.status.toUpperCase()} - ${member.firstName} ${member.lastName} (${member.login})`);
    }
    
    // Stocker aussi les IDs admin et dev
    userIds['admin'] = adminId;
    userIds['lmao'] = devId;

    // 7) Configuration des param√®tres syst√®me
    const settingsCol = db.collection(COLLECTIONS.SETTINGS);
    await settingsCol.insertOne({
      key: 'system',
      registrationRequiresApproval: true,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    console.log('‚Ä¢ Param√®tres syst√®me initialis√©s avec approbation requise pour l\'inscription');
      // 8) Messages r√©alistes pour l'association avec r√©ponses et interactions
    const messagesCol = db.collection(COLLECTIONS.MESSAGES);
    
    // Messages pour le forum public - Vie de l'association
    const publicForumMessages = [
      {
        userId: userIds['marie.president'],
        text: "Bonjour √† tous ! J'esp√®re que vous allez bien. Je tenais √† vous informer que notre assembl√©e g√©n√©rale annuelle aura lieu le samedi 15 juin √† 14h dans la salle des f√™tes. Nous ferons le bilan de l'ann√©e et pr√©senterons les projets pour 2024. Votre pr√©sence est importante !",
        timestamp: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),
        replies: [
          {
            userId: userIds['pierre.tresorier'],
            text: "Merci Marie ! Je pr√©pare le bilan financier. Tr√®s positif cette ann√©e gr√¢ce √† vos efforts √† tous üí™",
            timestamp: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000)
          },
          {
            userId: userIds['sophie.secretaire'],
            text: "Je confirme ma pr√©sence. J'ai d√©j√† pr√©par√© le rapport d'activit√©s. H√¢te de voir tout le monde !",
            timestamp: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000 + 4 * 60 * 60 * 1000)
          }
        ]
      },
      {
        userId: userIds['julien.event'],
        text: "üéâ Le festival d'√©t√© approche ! Nous cherchons encore des b√©n√©voles pour l'organisation. Si vous avez quelques heures √† nous consacrer les 20-21 juillet, n'h√©sitez pas √† me contacter. Ambiance garantie !",
        timestamp: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000),
        replies: [
          {
            userId: userIds['emma.benevole'],
            text: "Je suis partante ! Comme d'habitude üòä Sur quels cr√©neaux as-tu le plus besoin d'aide ?",
            timestamp: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000 + 1 * 60 * 60 * 1000)
          },
          {
            userId: userIds['lucas.sport'],
            text: "Moi aussi je peux aider ! Surtout pour monter/d√©monter les structures si besoin.",
            timestamp: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000 + 3 * 60 * 60 * 1000)
          },
          {
            userId: userIds['julien.event'],
            text: "@emma @lucas Parfait ! Je vous envoie un message priv√© avec les d√©tails üëç",
            timestamp: new Date(Date.now() - 11 * 24 * 60 * 60 * 1000)
          }
        ]
      },
      {
        userId: userIds['claire.comm'],
        text: "üì∏ N'oubliez pas de taguer @AssoVilleVerte sur vos photos des √©v√©nements ! Notre page Facebook grandit et on atteint bient√¥t les 500 abonn√©s. Merci pour votre soutien !",
        timestamp: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000),
        replies: [
          {
            userId: userIds['camille.culture'],
            text: "Super travail Claire ! Les posts sur l'expo d'art local ont eu beaucoup de succ√®s üé®",
            timestamp: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000 + 30 * 60 * 1000)
          }
        ]
      },
      {
        userId: userIds['antoine.tech'],
        text: "üîß Maintenance du site web pr√©vue dimanche matin entre 8h et 10h. Le site pourrait √™tre inaccessible pendant cette p√©riode. D√©sol√© pour la g√™ne !",
        timestamp: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000),
        replies: []
      },
      {
        userId: userIds['thomas.jeunes'],
        text: "üèÄ Tournoi de basket 3x3 organis√© pour les jeunes de l'association le mercredi 28 juin ! Inscriptions ouvertes, √©quipes mixtes encourag√©es. Qui est chaud ? üî•",
        timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        replies: [
          {
            userId: userIds['lucas.sport'],
            text: "Excellente id√©e ! Je peux vous pr√™ter du mat√©riel si besoin. J'ai des ballons et des chasubles.",
            timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000 + 45 * 60 * 1000)
          },
          {
            userId: userIds['emma.benevole'],
            text: "Moi je veux bien arbitrer quelques matchs ! √áa me rappellera mes ann√©es de club üòÑ",
            timestamp: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000)
          }
        ]
      },
      {
        userId: userIds['camille.culture'],
        text: "üé≠ Retour sur notre soir√©e th√©√¢tre de samedi dernier : un franc succ√®s ! 80 personnes pr√©sentes, ambiance chaleureuse et spectacle de qualit√©. Merci √† tous ceux qui ont particip√©. Prochaine soir√©e culturelle en septembre !",
        timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
        replies: [
          {
            userId: userIds['marie.president'],
            text: "Bravo Camille pour l'organisation ! Ces moments de partage sont pr√©cieux pour tisser des liens. üëè",
            timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000)
          }
        ]
      },
      {
        userId: userIds['pierre.tresorier'],
        text: "üí∞ Point finances : gr√¢ce √† vos cotisations et aux b√©n√©fices des √©v√©nements, nous avons pu financer 3 nouveaux projets ce trimestre. La situation financi√®re de l'association est saine. D√©tails en AG !",
        timestamp: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000),
        replies: []
      },
      {
        userId: userIds['sophie.secretaire'],
        text: "üìã Rappel : les comptes-rendus des r√©unions sont disponibles dans l'espace membre du site. N'h√©sitez pas √† les consulter pour rester au courant des d√©cisions prises.",
        timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        replies: []
      },
      {
        userId: userIds['emma.benevole'],
        text: "üå± Journ√©e plantation d'arbres samedi prochain au parc municipal ! RDV 9h entr√©e principale. Gants et outils fournis. Qui vient verdir notre belle ville avec nous ? üå≥",
        timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
        replies: [
          {
            userId: userIds['antoine.tech'],
            text: "Je serai l√† ! √áa fait du bien de mettre les mains dans la terre apr√®s des heures devant l'√©cran üòÖ",
            timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000 + 3 * 60 * 60 * 1000)
          },
          {
            userId: userIds['thomas.jeunes'],
            text: "Super initiative ! J'am√®ne mes jeunes, √ßa leur fera un bon projet √©co-citoyen.",
            timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)
          }
        ]
      }
    ];

    // Messages pour le forum admin - Gestion interne
    const adminForumMessages = [
      {
        userId: userIds['admin'],
        text: "R√©union bureau pr√©vue jeudi 15h en visio. Points √† l'ordre du jour : budget festival, nouveaux adh√©rents, partenariats locaux. Merci de confirmer votre pr√©sence.",
        timestamp: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),
        replies: [
          {
            userId: userIds['marie.president'],
            text: "Pr√©sente ! J'ai pr√©par√© le dossier partenariats avec la mairie.",
            timestamp: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000 + 1 * 60 * 60 * 1000)
          },
          {
            userId: userIds['pierre.tresorier'],
            text: "OK pour moi. Le budget festival est boucl√©, on peut valider.",
            timestamp: new Date(Date.now() - 13 * 24 * 60 * 60 * 1000)
          }
        ]
      },
      {
        userId: userIds['lmao'],
        text: "Mise √† jour syst√®me effectu√©e. Nouvelles fonctionnalit√©s de mod√©ration activ√©es. Pensez √† tester vos acc√®s admin.",
        timestamp: new Date(Date.now() - 9 * 24 * 60 * 60 * 1000),
        replies: []
      },
      {
        userId: userIds['marie.president'],
        text: "4 nouvelles demandes d'adh√©sion cette semaine. Profils int√©ressants, motivations solides. Je propose qu'on les valide en bureau. Qu'en pensez-vous ?",
        timestamp: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000),
        replies: [
          {
            userId: userIds['sophie.secretaire'],
            text: "J'ai v√©rifi√© les dossiers, tout semble en ordre. On pourrait faire un petit entretien informel ?",
            timestamp: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000)
          },
          {
            userId: userIds['admin'],
            text: "Bonne id√©e l'entretien. √áa permet de mieux conna√Ætre leurs motivations. Je peux organiser √ßa.",
            timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
          }
        ]
      },
      {
        userId: userIds['pierre.tresorier'],
        text: "Subvention mairie accord√©e ! 2500‚Ç¨ pour le projet jeunesse. On peut lancer les activit√©s pr√©vues. Thomas, tu peux d√©marrer l'organisation.",
        timestamp: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000),
        replies: [
          {
            userId: userIds['thomas.jeunes'],
            text: "G√©nial ! Je lance les inscriptions d√®s demain. Merci Pierre pour ton travail sur le dossier üôè",
            timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
          }
        ]
      }
    ];    // Fonction pour cr√©er les messages avec leurs r√©ponses
    const createMessagesWithReplies = async (messages, forumId) => {
      for (const msg of messages) {
        const messageDoc = {
          _id: new ObjectId(),
          userId: new ObjectId(msg.userId), // Uniformiser en ObjectId
          forumId: forumId,
          user: await getUserDisplayName(msg.userId),
          login: await getUserLogin(msg.userId),
          avatar: await getUserAvatar(msg.userId),
          text: msg.text,
          createdAt: msg.timestamp,
          likes: [],
          replies: []
        };

        // Ajouter les r√©ponses si elles existent
        if (msg.replies && msg.replies.length > 0) {
          for (const reply of msg.replies) {
            messageDoc.replies.push({
              id: new ObjectId().toString(),
              userId: new ObjectId(reply.userId), // Uniformiser en ObjectId
              user: await getUserDisplayName(reply.userId),
              login: await getUserLogin(reply.userId),
              avatar: await getUserAvatar(reply.userId),
              text: reply.text,
              timestamp: reply.timestamp,
              likes: []
            });
          }
        }

        await messagesCol.insertOne(messageDoc);
      }
    };    // Fonctions helper pour r√©cup√©rer les infos utilisateur
    async function getUserDisplayName(userId) {
      if (userId.equals(adminId)) return 'Admin System';
      if (userId.equals(devId)) return 'Dev Account';
      
      const member = associationMembers.find(m => userIds[m.login].equals(userId));
      return member ? `${member.firstName} ${member.lastName}` : 'Utilisateur Inconnu';
    }

    async function getUserLogin(userId) {
      if (userId.equals(adminId)) return 'admin';
      if (userId.equals(devId)) return 'lmao';
      
      const member = associationMembers.find(m => userIds[m.login].equals(userId));
      return member ? member.login : 'unknown';
    }

    async function getUserAvatar(userId) {
      const displayName = await getUserDisplayName(userId);
      const names = displayName.split(' ');
      return names.length >= 2 ? (names[0].charAt(0) + names[1].charAt(0)).toUpperCase() : displayName.charAt(0).toUpperCase();
    }

    // Cr√©er les messages pour les deux forums
    await createMessagesWithReplies(publicForumMessages, publicForumId);
    await createMessagesWithReplies(adminForumMessages, privateForumId);
    
    console.log(`${publicForumMessages.length} messages cr√©√©s dans le forum public`);
    console.log(`${adminForumMessages.length} messages cr√©√©s dans le forum admin`);

    // 9) Jeux de conversations priv√©es vari√©es
    const convCol = db.collection(COLLECTIONS.CONVERSATIONS);
    const pmCol = db.collection(COLLECTIONS.PRIVATE_MESSAGES);
    // R√©cup√©rer tous les utilisateurs actifs
    const allUsers = await usersCol.find({ status: 'active' }).toArray();
    const devUser = allUsers.find(u => u.login === 'lmao');
    const adminUser = allUsers.find(u => u.login === 'admin');
    const regularUsers = allUsers.filter(u => u.login !== 'lmao' && u.login !== 'admin');
    // Mod√®les de conversations
    const convTemplates = [
      {
        participants: [devUser._id, regularUsers[0]._id],
        messages: [
          { senderId: devUser._id, text: 'Salut, comment se passe la mise en place du composant ?', timestamp: new Date(Date.now() - 15 * 60 * 1000) },
          { senderId: regularUsers[0]._id, text: '√áa avance bien, j‚Äôai juste un petit bug sur le style CSS.', timestamp: new Date(Date.now() - 12 * 60 * 1000) },
          { senderId: devUser._id, text: 'Envoie-moi ton code, je regarde √ßa tout de suite.', timestamp: new Date(Date.now() - 10 * 60 * 1000) }
        ]
      },
      {
        participants: [adminUser._id, regularUsers[1]._id],
        messages: [
          { senderId: regularUsers[1]._id, text: 'Bonjour, j‚Äôai besoin d‚Äôun acc√®s admin pour tester la nouvelle fonctionnalit√©.', timestamp: new Date(Date.now() - 20 * 60 * 1000) },
          { senderId: adminUser._id, text: 'Je viens de t‚Äôajouter au groupe admin, tu devrais recevoir un email.', timestamp: new Date(Date.now() - 18 * 60 * 1000) },
          { senderId: regularUsers[1]._id, text: 'Parfait, merci beaucoup !', timestamp: new Date(Date.now() - 16 * 60 * 1000) }
        ]
      },
      {
        participants: [devUser._id, adminUser._id],
        messages: [
          { senderId: adminUser._id, text: 'Peux-tu faire un point sur la roadmap cette apr√®s-midi ?', timestamp: new Date(Date.now() - 30 * 60 * 1000) },
          { senderId: devUser._id, text: 'Absolument, je pr√©pare un r√©capitulatif et je te l‚Äôenvoie.', timestamp: new Date(Date.now() - 28 * 60 * 1000) }
        ]
      }
    ];
    // Cr√©ation des conversations et insertion des messages
    for (const tpl of convTemplates) {
      const now = new Date();
      const convRes = await convCol.insertOne({
        participants: tpl.participants,
        createdAt: tpl.messages[0].timestamp,
        updatedAt: now,
        lastMessage: {
          text: tpl.messages[tpl.messages.length - 1].text,
          senderId: tpl.messages[tpl.messages.length - 1].senderId,
          timestamp: tpl.messages[tpl.messages.length - 1].timestamp
        },
        unreadBy: tpl.participants.slice(1)
      });
      const convId = convRes.insertedId.toString();
      for (const msg of tpl.messages) {
        const recipientId = tpl.participants.find(id => !id.equals(msg.senderId)).toString();
        await pmCol.insertOne({
          conversationId: convId,
          senderId: msg.senderId.toString(),
          recipientId,
          text: msg.text,
          timestamp: msg.timestamp,
          read: false
        });
      }
      console.log('Conversation entre ' + tpl.participants.map(id => allUsers.find(u=>u._id.equals(id)).login).join(' et ') + ' cr√©√©e');
    }

    console.log('R√©initialisation termin√©e');
  } catch (err) {
    console.error('Erreur de r√©initialisation :', err);
  } finally {
    await client.close();
  }
})();
